@page "/students/edit"
@using Microsoft.EntityFrameworkCore
@using SkolniEvidence.Model
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Student</h2>
<hr />
@if (Student is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Student" OnValidSubmit="UpdateStudent" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Student.Id" value="@Student.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Student.FirstName" class="form-control" />
                    <ValidationMessage For="() => Student.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Student.LastName" class="form-control" />
                    <ValidationMessage For="() => Student.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="male" class="form-label">Male:</label>
                    <InputCheckbox id="male" @bind-Value="Student.Male" class="form-check-input" />
                    <ValidationMessage For="() => Student.Male" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="Student.BirthDate" class="form-control" />
                    <ValidationMessage For="() => Student.BirthDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/students">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Student? Student { get; set; }

    protected override async Task OnInitializedAsync()
    {
   
        Student ??= await context.Students.FirstOrDefaultAsync(m => m.Id == Id);

        if (Student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateStudent()
    {
        context.Attach(Student!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StudentExists(Student!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/students");
    }

    private bool StudentExists(int id)
    {
        return context.Students.Any(e => e.Id == id);
    }
}
